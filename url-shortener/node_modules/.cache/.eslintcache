[{"C:\\Users\\Chris\\Documents\\GitHub\\url-shortener\\url-shortener\\src\\index.js":"1","C:\\Users\\Chris\\Documents\\GitHub\\url-shortener\\url-shortener\\src\\App.js":"2","C:\\Users\\Chris\\Documents\\GitHub\\url-shortener\\url-shortener\\src\\reportWebVitals.js":"3","C:\\Users\\Chris\\Documents\\GitHub\\url-shortener\\url-shortener\\src\\components\\Form.js":"4"},{"size":1002,"mtime":1692561296484,"results":"5","hashOfConfig":"6"},{"size":514,"mtime":1692668922680,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1692502181931,"results":"8","hashOfConfig":"6"},{"size":10653,"mtime":1692667585290,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"gsaiyv",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"13"},"C:\\Users\\Chris\\Documents\\GitHub\\url-shortener\\url-shortener\\src\\index.js",[],[],[],"C:\\Users\\Chris\\Documents\\GitHub\\url-shortener\\url-shortener\\src\\App.js",["24"],[],"C:\\Users\\Chris\\Documents\\GitHub\\url-shortener\\url-shortener\\src\\reportWebVitals.js",[],[],"C:\\Users\\Chris\\Documents\\GitHub\\url-shortener\\url-shortener\\src\\components\\Form.js",["25","26"],[],"import React from \"react\";\r\nimport { nanoid } from 'nanoid'\r\nimport { getDatabase, child, ref, set, get } from \"firebase/database\";\r\nimport { isWebUri } from 'valid-url';\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\n\r\n// Define the Form component\r\nclass Form extends React.Component {\r\n\r\n    // Initialize state and bind methods in the constructor\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            longURL: '', // The original URL to be shortened\r\n            preferedAlias: '', // The user's preferred alias for the shortened URL\r\n            generatedURL: '', // The resulting shortened URL\r\n            loading: false, // A flag to indicate whether a request is in progress\r\n            errors: [], // An array to hold any validation errors\r\n            errorMessage: {}, // An object to hold error messages for display\r\n            toolTipMessage: 'Copy To Clip Board' // Tooltip message for the copy button\r\n        };\r\n    }\r\n\r\n    // Method to handle form submission\r\n    onSubmit = async (event) => {\r\n        event.preventDefault(); // Prevents the page from reloading when submit is clicked\r\n\r\n        this.setState({\r\n            loading: true, // Set loading flag to true while processing\r\n            generatedURL: '' // Clear any previously generated URL\r\n        })\r\n\r\n        // Validate the input the user has submitted\r\n        var isFormValid = await this.validateInput()\r\n        if (!isFormValid) {\r\n            return // If validation fails, exit the method\r\n        }\r\n\r\n        // If the user has input a preferred alias then we use it, if not, we generate one\r\n        var generatedKey = nanoid(5); // Generate a random key using nanoid\r\n        var generatedURL = \"minilinkit.com/\" + generatedKey // Construct the shortened URL\r\n\r\n        if (this.state.preferedAlias !== '') {\r\n            generatedKey = this.state.preferedAlias // Use the user's preferred alias as the key\r\n            generatedURL = \"minilinkit.com/\" + this.state.preferedAlias // Construct the shortened URL using the preferred alias\r\n        }\r\n\r\n        const db = getDatabase(); // Get a reference to the Firebase database\r\n\r\n        set(ref(db, '/' + generatedKey), { // Write data to Firebase under the generated key\r\n\r\n            generatedKey: generatedKey,\r\n            longURL: this.state.longURL,\r\n            preferedAlias: this.state.preferedAlias,\r\n            generatedURL: generatedURL\r\n\r\n        }).then((result) => {\r\n            this.setState({\r\n                generatedURL: generatedURL, // Update state with the new shortened URL\r\n                loading: false // Set loading flag to false after processing is complete\r\n            })\r\n        }).catch((e) => {\r\n\r\n        })\r\n    };\r\n\r\n    // Method to check if a field has an error\r\n    hasError = (key) => {\r\n        return this.state.errors.indexOf(key) !== -1; // Check if the key exists in the errors array\r\n    }\r\n\r\n    // Method to handle changes in form fields\r\n    handleChange = (e) => {\r\n        const { id, value } = e.target \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [id]: value  // Update state with the new value of the field that was changed\r\n        }))\r\n    }\r\n\r\n    validateInput = async () => {\r\n        var errors = [];\r\n        var errorMessages = this.state.errorMessage\r\n\r\n        if (this.state.longURL.length === 0) {\r\n            errors.push(\"longURL\");\r\n            errorMessages['longURL'] = 'Please enter your URL!';\r\n        } else if (!isWebUri(this.state.longURL)) {\r\n            errors.push(\"longURL\");\r\n            errorMessages['longURL'] = 'Please a URL in the form of https://www....';\r\n        }\r\n\r\n        if (this.state.preferedAlias !== '') {\r\n            if (this.state.preferedAlias.length > 7) {\r\n                errors.push(\"suggestedAlias\");\r\n                errorMessages['suggestedAlias'] = 'Please Enter an Alias less than 7 Characters';\r\n            } else if (this.state.preferedAlias.indexOf(' ') >= 0) {\r\n                errors.push(\"suggestedAlias\");\r\n                errorMessages['suggestedAlias'] = 'Spaces are not allowed in URLS';\r\n            }\r\n\r\n            var keyExists = await this.checkKeyExists()\r\n\r\n            if (keyExists.exists()) {\r\n                errors.push(\"suggestedAlias\");\r\n                errorMessages['suggestedAlias'] = 'The Alias you have entered already exists! Please enter another one =-)';\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            errors: errors,\r\n            errorMessages: errorMessages,\r\n            loading: false\r\n        });\r\n\r\n        if (errors.length > 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    checkKeyExists = async () => {\r\n        const dbRef = ref(getDatabase());\r\n        return get(child(dbRef, `/${this.state.preferedAlias}`)).catch((error) => {\r\n            return false\r\n        });\r\n    }\r\n// Method to copy the generated URL to the clipboard\r\ncopyToClipBoard = () => {\r\n    navigator.clipboard.writeText(this.state.generatedURL) // Write the generated URL to the clipboard\r\n    this.setState({\r\n        toolTipMessage: 'Copied!' // Update the tooltip message to indicate success\r\n    })\r\n}\r\n\r\n// Method to render the component\r\nrender() {\r\n    return (\r\n        <div className=\"container\">\r\n            <form autoComplete=\"off\">\r\n                <h3>Mini Link It!</h3>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Enter Your Long URL</label>\r\n                    <input\r\n                        id=\"longURL\"\r\n                        onChange={this.handleChange} // Call handleChange method when the input changes\r\n                        value={this.state.longURL} // The current value of the longURL state\r\n                        type=\"url\"\r\n                        required\r\n                        className={\r\n                            this.hasError(\"longURL\") // Add 'is-invalid' class if there's an error with longURL\r\n                                ? \"form-control is-invalid\"\r\n                                : \"form-control\"\r\n                        }\r\n                        placeholder=\"https://www...\"\r\n                    />\r\n                </div>\r\n                <div\r\n                    className={\r\n                        this.hasError(\"longURL\") ? \"text-danger\" : \"visually-hidden\" // Show error message if there's an error with longURL\r\n                    }\r\n                >\r\n                    {this.state.errorMessage.longURL}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"basic-url\">Your Mini URL</label>\r\n                    <div className=\"input-group mb-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\">minilinkit.com/</span>\r\n                        </div>\r\n                        <input\r\n                            id=\"preferedAlias\"\r\n                            onChange={this.handleChange} // Call handleChange method when the input changes\r\n                            value={this.state.preferedAlias} // The current value of the preferedAlias state\r\n                            className={\r\n                                this.hasError(\"preferedAlias\") // Add 'is-invalid' class if there's an error with preferedAlias\r\n                                    ? \"form-control is-invalid\"\r\n                                    : \"form-control\"\r\n                            }\r\n                            type=\"text\" placeholder=\"eg. 3fwias (Optional)\"\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        className={\r\n                            this.hasError(\"suggestedAlias\") ? \"text-danger\" : \"visually-hidden\" // Show error message if there's an error with suggestedAlias\r\n                        }\r\n                    >\r\n                        {this.state.errorMessage.suggestedAlias}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <button className=\"btn btn-primary\" type=\"button\" onClick={this.onSubmit}>\r\n                    {\r\n                        this.state.loading ?\r\n                            <div>\r\n                                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> // Show a spinner while loading\r\n                            </div> :\r\n                            <div>\r\n                                <span className=\"visually-hidden spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                                <span>Mini Link It</span> // Show 'Mini Link It' when not loading\r\n                            </div>\r\n                    }\r\n\r\n                </button>\r\n\r\n                {\r\n                    // Check if a shortened URL has been generated\r\n                    this.state.generatedURL === '' ?\r\n                        <div></div> // If not, render an empty div\r\n                        :\r\n                        <div className=\"generatedurl\">\r\n                            <span>Your generated URL is: </span>\r\n                            <div className=\"input-group mb-3\">\r\n                                <input disabled type=\"text\" value={this.state.generatedURL} className=\"form-control\" placeholder=\"Recipient's username\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\" />\r\n                                    <div className=\"input-group-append\">\r\n                                        <OverlayTrigger\r\n                                            key={'top'}\r\n                                            placement={'top'}\r\n                                            overlay={\r\n                                                <Tooltip id={`tooltip-${'top'}`}>\r\n                                                    {this.state.toolTipMessage}\r\n                                                </Tooltip>\r\n                                            }\r\n                                        >\r\n                                            <button onClick={() => this.copyToClipBoard()} data-toggle=\"tooltip\" data-placement=\"top\" title=\"Tooltip on top\" className=\"btn btn-outline-secondary\" type=\"button\">Copy</button>\r\n\r\n                                        </OverlayTrigger>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                    }\r\n\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n\r\n\r\n",{"ruleId":"27","severity":1,"message":"28","line":1,"column":27,"nodeType":"29","messageId":"30","endLine":1,"endColumn":33},{"ruleId":"31","severity":1,"message":"32","line":202,"column":124,"nodeType":"33","messageId":"34","endLine":203,"endColumn":29},{"ruleId":"31","severity":1,"message":"32","line":206,"column":58,"nodeType":"33","messageId":"34","endLine":207,"endColumn":29},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces"]